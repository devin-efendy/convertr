{"version":3,"sources":["components/SelectorUI.js","components/InputUI.js","components/ConverterUI.js","components/HistoryItem.js","components/HistoryList.js","App.js","index.js"],"names":["buttonPopupStyle","borderRadius","opacity","SelectorUI","onCategoryChange","e","data","_this","props","onChangeCategory","value","react_default","a","createElement","Grid","columns","stackable","textAlign","Row","verticalAlign","Column","Form","Dropdown","className","placeholder","selection","fluid","options","this","list","onChange","Button","content","color","icon","labelPosition","onClick","onSaveClicked","style","width","marginRight","onClearClicked","Popup","trigger","onHistoryClearClicked","React","Component","InputUI","onValueChange","newValue","target","controlValueChange","section","onUnitChange","controlUnitChange","Header","header","Input","type","ConverterUI","state","currentUnitList","key","text","leftValue","leftUnit","rightValue","rightUnit","handleCategoryChange","measurement","currentList","require","convert","map","unit","abbr","singular","setState","measure","valueTo","unitFrom","unitTo","from","to","Number","newUnit","changeValue","handleSaveButtonClick","leftSingular","find","rightSingular","leftUnitAbbr","leftUnitFull","rightUnitAbbr","rightUnitFull","onSaveButtonClick","alert","handleClearButtonClick","Segment","Group","raised","inverted","Divider","vertical","fontSize","src_components_InputUI","components_SelectorUI","onClearHistory","categories","timeoutLength","HistoryItem","copyButtonIsOpen","getHistoryData","leftVal","history","isInteger","toString","length","toPrecision","rightVal","toUpperCase","strFormat","concat","handleCopyBtnOpen","timeout","setTimeout","handleCopyBtnClose","clearTimeout","onDeleteButtonClick","handleDeleteButtonClick","historyKey","onCopyButtonClick","el","document","body","appendChild","select","execCommand","removeChild","recentHistorySegment","arguments","undefined","border","historySegment","size","backgroundColor","_this2","finalSegment","height","on","open","onClose","onOpen","HistoryList","handleDelete","renderContent","listOfHistory","margin","Transition","as","List","duration","divided","dataList","i","Item","components_HistoryItem","contentRender","display","justifyContent","paddingTop","basic","overflow","App","handleSave","newData","prevState","Object","toConsumableArray","handleHistoryDeletion","delKey","splice","handleAllHistoryDeletion","padding","Container","marginBottom","href","rel","compact","Icon","name","components_ConverterUI","components_HistoryList","ReactDOM","render","src_App","querySelector"],"mappings":"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","file":"static/js/main.78798d3d.chunk.js","sourcesContent":["/** SelectorUI\n * This component will render:\n * 1. Category Selection Dropdown\n * 2. All three interactive button (SAVE, CLEAR, DELETE HISTORY)\n */\nimport React from 'react';\nimport { Button, Form, Grid, Popup } from 'semantic-ui-react';\n\n// style for the popup\nconst buttonPopupStyle = {\n  borderRadius: 0,\n  opacity: 0.7\n};\n\nclass SelectorUI extends React.Component {\n  /** onCategoryChange\n   * This function will be triggered when the user change the measurement category\n   *\n   * Will call the parent component function that passed as a props\n   *\n   * @param {event} e: onChange event of dropdown element\n   * @param {object} data: data of the selected dropdown item\n   */\n  onCategoryChange = (e, data) => {\n    this.props.onChangeCategory(data.value);\n  };\n\n  render() {\n    return (\n      <Grid columns={2} stackable textAlign=\"center\">\n        {/* Grid.Row */}\n        <Grid.Row verticalAlign=\"middle\">\n          {/* Grid.Column - 1 */}\n          <Grid.Column>\n            <Form.Dropdown\n              className=\"selector-default\"\n              placeholder=\"Choose Measurement\"\n              selection\n              fluid\n              options={this.props.list}\n              onChange={this.onCategoryChange}\n            />\n          </Grid.Column>\n          {/* Grid.Column - 1 --end */}\n          {/* Grid.Column - 2 */}\n          <Grid.Column>\n            {/* Group of button\n                Save Button\n                Clear Button\n                Delete History Button\n                 */}\n            <Button\n              content=\"Save\"\n              color=\"green\"\n              icon=\"plus\"\n              labelPosition=\"left\"\n              onClick={this.props.onSaveClicked}\n              style={{ width: '30%', marginRight: '3%' }}\n            />\n            <Button\n              content=\"Clear\"\n              color=\"blue\"\n              icon=\"undo alternate\"\n              labelPosition=\"left\"\n              onClick={this.props.onClearClicked}\n              style={{ width: '30%', marginRight: '3%' }}\n            />\n            <Popup\n              trigger={\n                <Button\n                  content=\"History\"\n                  color=\"red\"\n                  icon=\"times\"\n                  labelPosition=\"left\"\n                  onClick={this.props.onHistoryClearClicked}\n                  style={{ width: '30%' }}\n                />\n              }\n              style={buttonPopupStyle}\n              content=\"Delete all conversion history\"\n            />\n            {/* Group of Button --end */}\n          </Grid.Column>\n          {/* Grid.Column - 2 --end */}\n        </Grid.Row>\n        {/* Grid.Row --end */}\n      </Grid>\n    );\n  }\n}\n\nexport default SelectorUI;\n","/** InputUI\n *  This class will render the form that will take the values and units as its inputs\n *\n *  All of the informations then will be passed to the parent component\n *  which is the ConverterUI\n */\nimport React from 'react';\nimport { Form, Header } from 'semantic-ui-react';\nimport './InputUI.css';\n\nclass InputUI extends React.Component {\n  /** onValueChange\n   * This function will be triggered when the user change the value input\n   * This function will call the ConverterUI function that is passed as a props\n   * @param {event} e: onChange event of input element\n   */\n  onValueChange = e => {\n    const newValue = e.target.value;\n    this.props.controlValueChange(newValue, this.props.section);\n  };\n\n  /** onUnitChange\n   * This function will be triggered when the user change the unit input\n   * This function will call the ConverterUI function that is passed as a props\n   * @param {event} e: onChange event of dropdown element\n   * @param {object} data: data of the selected dropdown item\n   */\n  onUnitChange = (e, data) => {\n    this.props.controlUnitChange(data.value, this.props.section);\n  };\n\n  render() {\n    return (\n      <div className=\"lg-field\">\n        <Header icon style={{ color: 'white' }}>\n          {this.props.header}\n        </Header>\n\n        <Form.Input\n          className=\"value-input\"\n          fluid\n          type=\"number\"\n          value={this.props.newValue}\n          placeholder=\"Value\"\n          onChange={this.onValueChange}\n        />\n\n        <Form.Dropdown\n          className=\"unit-input\"\n          selection\n          fluid\n          options={this.props.options}\n          placeholder=\"Unit\"\n          onChange={this.onUnitChange}\n        />\n      </div>\n    );\n  }\n}\n\nexport default InputUI;\n","/** ConverterUI\n * This is the class that render all the main UI for values and unit inputs\n * Also, render the SelectorUI and InputUI\n */\nimport React from 'react';\nimport { Segment, Grid, Form, Divider } from 'semantic-ui-react';\nimport SelectorUI from './SelectorUI';\nimport InputUI from './InputUI';\n\nclass ConverterUI extends React.Component {\n  /** ConverterUI States\n   * @type {array} currentUnitList: (the current )A list of units from the measurement category\n   * @type {number} leftVal & rightVal: Represent input values for left/right section\n   * @type {string} leftUnit & rightUnit: Represent selected units for left/right section\n   */\n  state = {\n    currentUnitList: [\n      { key: 'default', text: 'Please select the unit category' }\n    ],\n    leftValue: '',\n    leftUnit: '',\n    rightValue: '',\n    rightUnit: ''\n  };\n\n  /** handleCategoryChange\n   * To handle change in measurement category.\n   * By getting the new measurement category from SelectorUI.\n   * Get the list of units from that category and update the state\n   *\n   * This will be passed as a props to SelectorUI.\n   *\n   * @param {number} key\n   */\n  handleCategoryChange = measurement => {\n    /** @type {array} currentList */\n    let currentList = null;\n    /** @type {array} units */\n    let units = null;\n\n    // Get the list units from a measurement category\n    const convert = require('convert-units');\n    units = convert().list(measurement);\n    // Map all values in units to an object that can be represented as Dropdown Item\n    currentList = units.map(unit => {\n      return { key: unit.abbr, value: unit.abbr, text: unit.singular };\n    });\n\n    this.setState({\n      measure: measurement,\n      currentUnitList: currentList,\n      leftValue: '',\n      leftUnit: '',\n      rightValue: '',\n      rightUnit: ''\n    });\n  };\n\n  /** onValueChange\n   * Handle when either input of values change\n   *\n   * This will passed to both InputUI as a props.\n   * Changes of values from InputUI will be taken as the argument for this function\n   *\n   * @param {number} newValue: new value that will assigned to the current state\n   * @param {string} section: indicates the section of InputUI\n   */\n  onValueChange = (newValue, section) => {\n    if (newValue && this.state.leftUnit && this.state.rightUnit) {\n      const convert = require('convert-units');\n      let valueTo = -1;\n      let unitFrom = '';\n      let unitTo = '';\n\n      // Check which section is calling function\n      // Depending on the section get the correct values and inputs\n      if (section === 'left') {\n        unitFrom = this.state.leftUnit;\n        unitTo = this.state.rightUnit;\n      } else if (section === 'right') {\n        unitFrom = this.state.rightUnit;\n        unitTo = this.state.leftUnit;\n      }\n\n      // Calculate the new values\n      valueTo = convert(newValue)\n        .from(unitFrom)\n        .to(unitTo);\n\n      // Check which section is calling this function\n      // Depending on the section, update the state\n      if (section === 'left') {\n        this.setState({\n          leftValue: Number(newValue),\n          rightValue: Number(valueTo)\n        });\n      } else if (section === 'right') {\n        this.setState({\n          leftValue: Number(valueTo),\n          rightValue: Number(newValue)\n        });\n      }\n    } else {\n      // Don't update the state if the units are not selected\n      this.setState({ leftValue: '', rightValue: '' });\n    }\n  };\n\n  /** onValueChange\n   * Handle when either input of untis change\n   *\n   * This will passed to both InputUI as a props.\n   * Changes of units from InputUI will be taken as the argument for this function\n   *\n   * @param {number} newUnit: new unit that will assigned to the current state\n   * @param {string} section: indicates the section of InputUI\n   */\n  onUnitChange = (newUnit, section) => {\n    if (section === 'left') {\n      this.setState({ leftUnit: newUnit }, () => {\n        if (this.state.rightUnit && this.state.rightValue) {\n          this.changeValue();\n        }\n      });\n    } else if (section === 'right') {\n      this.setState({ rightUnit: newUnit }, () => {\n        if (this.state.leftUnit && this.state.leftValue) {\n          this.changeValue();\n        }\n      });\n    }\n  };\n\n  /** changeValue\n   * This function to be called when unit is changed.\n   * This always convert what is from left value and set it to the right value\n   */\n  changeValue = () => {\n    let convert = require('convert-units');\n    const newValue = convert(this.state.leftValue)\n      .from(this.state.leftUnit)\n      .to(this.state.rightUnit);\n    this.setState({ rightValue: Number(newValue) });\n  };\n\n  /** handleSaveButtonClick\n   * To handle when the SAVE button is clicked\n   * This function will call the props onSaveButtonClick and passed all data\n   * which is the current state of this Component (values and units)\n   *\n   * This will be passed as a props to SelectorUI.\n   */\n  handleSaveButtonClick = () => {\n    if (\n      this.state.leftUnit &&\n      this.state.leftValue &&\n      this.state.rightUnit &&\n      this.state.rightValue\n    ) {\n      //This is to get the full name of the units\n      const leftSingular = this.state.currentUnitList.find(e => {\n        return e.key === this.state.leftUnit;\n      });\n\n      const rightSingular = this.state.currentUnitList.find(e => {\n        return e.key === this.state.rightUnit;\n      });\n\n      // Create an object that contain all the information needed to create a history\n      const data = {\n        leftValue: this.state.leftValue,\n        leftUnitAbbr: this.state.leftUnit,\n        leftUnitFull: leftSingular.text,\n        rightValue: this.state.rightValue,\n        rightUnitAbbr: this.state.rightUnit,\n        rightUnitFull: rightSingular.text\n      };\n      // Call the function by the props\n      this.props.onSaveButtonClick(data);\n    } else {\n      alert('Please completely fill the form before saving.');\n    }\n  };\n\n  /** handleClearButtonClick\n   * To handle when the CLEAR button in the SelectorUI is clicked.\n   * This will be passed as a props to SelectorUI\n   */\n  handleClearButtonClick = () => {\n    this.setState({\n      leftValue: '',\n      rightValue: ''\n    });\n  };\n\n  render() {\n    return (\n      <Form>\n        <Segment.Group raised>\n          {/* Segment of the major UI that includes InputUI */}\n          <Segment placeholder inverted color=\"teal\">\n            <Grid columns={2} stackable textAlign=\"center\">\n              <Divider vertical style={{ fontSize: '1.2rem' }}>\n                CONVERT TO\n              </Divider>\n              {/* Grid.Row */}\n              <Grid.Row verticalAlign=\"middle\">\n                {/* Grid.Column - 1 */}\n                <Grid.Column className=\"input-left\">\n                  <InputUI\n                    section=\"left\"\n                    header=\"FROM\"\n                    newValue={this.state.leftValue}\n                    newUnit={this.state.leftUnit}\n                    options={this.state.currentUnitList}\n                    controlValueChange={this.onValueChange}\n                    controlUnitChange={this.onUnitChange}\n                  />\n                </Grid.Column>\n                {/* Grid.Column - 1 --end*/}\n                {/* Grid.Column - 2 */}\n                <Grid.Column className=\"input-right\">\n                  <InputUI\n                    section=\"right\"\n                    header=\"TO\"\n                    newValue={this.state.rightValue}\n                    newUnit={this.state.rightUnit}\n                    options={this.state.currentUnitList}\n                    controlValueChange={this.onValueChange}\n                    controlUnitChange={this.onUnitChange}\n                  />\n                </Grid.Column>\n                {/* Grid.Column - 2 --end */}\n              </Grid.Row>\n              {/* Grid.Row --end */}\n            </Grid>\n          </Segment>\n          {/* Segment of the major UI that includes InputUI --end*/}\n          {/* Segment of the SelectorUI */}\n          <Segment inverted color=\"violet\">\n            <SelectorUI\n              onChangeCategory={this.handleCategoryChange}\n              onSaveClicked={this.handleSaveButtonClick}\n              onClearClicked={this.handleClearButtonClick}\n              onHistoryClearClicked={this.props.onClearHistory}\n              list={this.props.categories}\n            />\n          </Segment>\n          {/* Segment of the SelectorUI --end */}\n        </Segment.Group>\n      </Form>\n    );\n  }\n}\n\nexport default ConverterUI;\n","/** HistoryItem\n * To render the information about one saved conversion history.\n * It allow the user to delete the the saved conversion history.\n * Also, allow the user to copy the summary of the conversion history\n * to the clipboard\n */\nimport React from 'react';\nimport { Grid, Button, Segment, Popup } from 'semantic-ui-react';\n\n// Time out length for the popup\nconst timeoutLength = 1250;\n\nclass HistoryItem extends React.Component {\n  // Component State\n  // copyButtonIsOpen: state that control copy button popup\n  state = { copyButtonIsOpen: false };\n\n  /** getHistoryData\n   * To return an Object that contain all the information about a single history\n   * Values will be formatted to 5 significant digits\n   * Also gives a string that contain a summary about that history\n   */\n  getHistoryData = () => {\n    let leftVal = this.props.history.leftValue;\n\n    // Format the values to a 5 significant figures\n    if (!Number.isInteger(leftVal) || leftVal.toString().length > 5) {\n      leftVal = leftVal.toPrecision(5);\n    }\n\n    let rightVal = this.props.history.rightValue;\n    if (!Number.isInteger(rightVal) || rightVal.toString().length > 5) {\n      rightVal = rightVal.toPrecision(5);\n    }\n    const leftUnitAbbr = this.props.history.leftUnitAbbr.toUpperCase();\n    const rightUnitAbbr = this.props.history.rightUnitAbbr.toUpperCase();\n    const leftUnitFull = this.props.history.leftUnitFull;\n    const rightUnitFull = this.props.history.rightUnitFull;\n    const strFormat = `${leftVal} ${leftUnitFull} [${leftUnitAbbr}] = ${rightVal} ${rightUnitFull} [${rightUnitAbbr}]`;\n\n    return {\n      leftVal,\n      rightVal,\n      leftUnitAbbr,\n      rightUnitAbbr,\n      leftUnitFull,\n      rightUnitFull,\n      strFormat\n    };\n  };\n\n  /** handleCopyBtnOpen\n   * To handle when opening the POPUP from clicking copy button\n   */\n  handleCopyBtnOpen = () => {\n    this.setState({ copyButtonIsOpen: true });\n\n    this.timeout = setTimeout(() => {\n      this.setState({ copyButtonIsOpen: false });\n    }, timeoutLength);\n  };\n\n  /** handleCopyBtnClose\n   * To handle when closing the POPUP from clicking copy button\n   */\n  handleCopyBtnClose = () => {\n    this.setState({ copyButtonIsOpen: false });\n    clearTimeout(this.timeout);\n  };\n\n  /** onDeleteButtonClick\n   * To handle when the user want to delete a certain conversion history\n   * This will call the parent component function to perform the actual deletion\n   */\n  onDeleteButtonClick = () => {\n    this.props.handleDeleteButtonClick(this.props.historyKey);\n  };\n\n  /** onCopyButtonClick\n   * To handle when the user click the copy to clipboard button of a\n   * particular conversion history\n   */\n  onCopyButtonClick = () => {\n    const el = document.createElement('textarea');\n    el.value = this.getHistoryData().strFormat;\n    document.body.appendChild(el);\n    el.select();\n    document.execCommand('copy');\n    document.body.removeChild(el);\n  };\n\n  /** recentHistorySegment\n   * Return a Segment component that is inverted an raised\n   * to indicates it's the most recent conversion history\n   *\n   * @param {string} text: A single conversion history summary\n   * @param {string} color: color of the segment, defaulted to green\n   */\n  recentHistorySegment = (text, color = 'green') => {\n    return (\n      <Segment\n        inverted\n        raised\n        color={color}\n        style={{ border: '2px solid teal' }}\n      >\n        {text}\n      </Segment>\n    );\n  };\n\n  /** historySegment\n   * Return a regular Segment that indicates it's the previous conversion history\n   *\n   * @param {string} text: A single conversion history summary\n   * @param {string} color: color of the segment, defaulted to green\n   */\n  historySegment = (text, color = 'gray') => {\n    return (\n      <Segment\n        size=\"small\"\n        style={{\n          backgroundColor: 'rgba(0,0,0,0.3)'\n        }}\n      >\n        {text}\n      </Segment>\n    );\n  };\n\n  render() {\n    let UsedSegment = null;\n    if (this.props.historyKey === 0) {\n      UsedSegment = this.recentHistorySegment;\n    } else {\n      UsedSegment = this.historySegment;\n    }\n\n    const finalSegment = UsedSegment(this.getHistoryData().strFormat);\n\n    return (\n      <Grid>\n        <Grid.Row columns=\"equal\">\n          <Grid.Column width={12}>{finalSegment}</Grid.Column>\n          <Grid.Column width={2}>\n            <Button\n              icon=\"trash\"\n              color=\"red\"\n              size=\"big\"\n              style={{\n                width: '100%',\n                height: '100%'\n              }}\n              onClick={() => {\n                this.props.handleDeleteButtonClick(this.props.historyKey);\n              }}\n            />\n          </Grid.Column>\n          <Grid.Column width={2}>\n            <Popup\n              trigger={\n                <Button\n                  icon=\"copy\"\n                  color=\"yellow\"\n                  size=\"big\"\n                  style={{\n                    width: '100%',\n                    height: '100%'\n                  }}\n                  onClick={this.onCopyButtonClick}\n                />\n              }\n              on=\"click\"\n              open={this.state.copyButtonIsOpen}\n              onClose={this.handleCopyBtnClose}\n              onOpen={this.handleCopyBtnOpen}\n              content=\"Copied to clipboard!\"\n            />\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    );\n  }\n}\n\nexport default HistoryItem;\n","import React from 'react';\nimport { List, Segment, Transition, Button } from 'semantic-ui-react';\n\nimport HistoryItem from './HistoryItem';\n\nclass HistoryList extends React.Component {\n  /** handleDelete\n   * This function will be passed as a props to HistoryItem\n   * so that whenever they delete button in HistoryItem is clicked\n   * it will trigger the parent component function that will perform the actual deletion\n   *\n   * @param {number} historyKey: index of the history array that will be deleted\n   */\n  handleDelete = historyKey => {\n    this.props.onChange(historyKey);\n  };\n\n  /** renderContent\n   * To allow conditional render that depends on whether the history is empty or not\n   * @param {array} listOfHistory\n   */\n  renderContent = listOfHistory => {\n    //If the history is empty, then display the information of how to operate the app\n    if (listOfHistory.length === 0) {\n      return (\n        <div>\n          <h3>\n            History is empty. Click the{' '}\n            <Button\n              content=\"Save\"\n              color=\"green\"\n              icon=\"plus\"\n              labelPosition=\"left\"\n              style={{ margin: '0px 1rem' }}\n            />\n            button to save your conversions!\n          </h3>\n          <h3>\n            Click the\n            <Button\n              content=\"Clear\"\n              color=\"blue\"\n              icon=\"undo alternate\"\n              labelPosition=\"left\"\n              style={{ margin: '0px 1rem' }}\n            />\n            button to reset the values to zero.\n          </h3>\n          <h3>\n            To delete all conversion history, simply click\n            <Button\n              content=\"History\"\n              color=\"red\"\n              icon=\"times\"\n              labelPosition=\"left\"\n              style={{ margin: '0px 1rem' }}\n            />\n          </h3>\n        </div>\n      );\n    } else {\n      return (\n        <Transition.Group\n          as={List}\n          duration={500}\n          divided\n          size=\"huge\"\n          verticalAlign=\"middle\"\n        >\n          {listOfHistory}\n        </Transition.Group>\n      );\n    }\n  };\n\n  render() {\n    // Map all the history to a ListItem that contain HistoryItem component\n    const listOfHistory = this.props.dataList.map((history, i) => {\n      return (\n        <List.Item key={i}>\n          <HistoryItem\n            handleDeleteButtonClick={this.handleDelete}\n            historyKey={i}\n            history={history}\n          />\n        </List.Item>\n      );\n    });\n\n    // Get the correct render content\n    let contentRender = this.renderContent(listOfHistory);\n\n    return (\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'center',\n          textAlign: 'center'\n        }}\n      >\n        <Segment\n          raised\n          style={{\n            width: '100%',\n            height: '45vh',\n            paddingTop: '1.5rem',\n            backgroundColor: '#aec6cf'\n          }}\n          inverted\n        >\n          <h2>CONVERSION HISTORY</h2>\n          <Segment basic style={{ height: '85%', overflow: 'auto' }}>\n            {contentRender}\n          </Segment>\n        </Segment>\n      </div>\n    );\n  }\n}\n\nexport default HistoryList;\n","/** Class: App\n *  Store all the saved conversions into the state 'history'\n *  Render the ConvertrUI (the main UI) and the List of History (HistoryList)\n * */\nimport React from 'react';\nimport { Container, Button, Icon } from 'semantic-ui-react';\n\nimport ConverterUI from './components/ConverterUI';\nimport HistoryList from './components/HistoryList';\n\n/**@type {array} Measurement categories*/\nconst categories = [\n  { key: 'length', value: 'length', text: 'Length' },\n  { key: 'area', value: 'area', text: 'Area' },\n  { key: 'mass', value: 'mass', text: 'Mass' },\n  { key: 'volume', value: 'volume', text: 'Volume' },\n  { key: 'time', value: 'time', text: 'Time' },\n  { key: 'temperature', value: 'temperature', text: 'Temperature' },\n  { key: 'speed', value: 'speed', text: 'Speed' },\n  { key: 'angle', value: 'angle', text: 'Angle' },\n  { key: 'digital', value: 'digital', text: 'Digital' }\n];\n\nclass App extends React.Component {\n  state = { history: [] };\n\n  /** handleSave\n   * To handle when the save button is clicked\n   * (e.g. when the user want to save their conversion)\n   *\n   * This will be passed to ConverterUI as a props and will be called from ConverterUI\n   * to passed the current input of conversion (values and units)\n   *\n   * @param {object} newData new saved conversion that will added to the history\n   */\n  handleSave = newData => {\n    this.setState(prevState => ({\n      history: [newData, ...prevState.history]\n    }));\n  };\n\n  /** handleHistoryDeletion\n   * To handle a deletion of saved HistoryItem\n   *\n   * This will be passed to HistoryList as a props\n   * and will be called from HistoryList with the key of HistoryItem that want to be deleted\n   *\n   * @param {object} delKey index of item that want to be deleted\n   */\n  handleHistoryDeletion = delKey => {\n    let history = this.state.history;\n    history.splice(delKey, 1);\n    this.setState({ history });\n  };\n\n  /**\n   * To handle when the user wanted to delete all histories.\n   * This will be passed to SelectorUI via ConverterUI as a props.\n   * The SelectorUI will then call this function to delete all history\n   */\n  handleAllHistoryDeletion = () => {\n    this.setState(prevState => ({\n      history: []\n    }));\n  };\n\n  render() {\n    return (\n      <div\n        style={{\n          padding: '30px 0',\n          backgroundColor: ' #f2f2f2',\n          height: '100vh'\n        }}\n      >\n        {/* Title Bar */}\n        <Container textAlign=\"center\" style={{ marginBottom: '10px' }}>\n          <h1 style={{ color: 'black', marginBottom: '10px' }}>\n            Welcome to convertr\n          </h1>\n          <a\n            href=\"https://github.com/devinsbt/Convertr\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <Button compact color=\"black\" onClick={this.onCopyButtonClick}>\n              <Icon name=\"github\" /> Github\n            </Button>\n          </a>\n        </Container>\n        {/* Main UI */}\n        <Container style={{ padding: '0' }}>\n          <ConverterUI\n            categories={categories}\n            onSaveButtonClick={this.handleSave}\n            onClearHistory={this.handleAllHistoryDeletion}\n          />\n        </Container>\n        {/* History List */}\n        <Container style={{ paddingTop: '30px' }}>\n          <HistoryList\n            onChange={this.handleHistoryDeletion}\n            dataList={this.state.history}\n          />\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.querySelector('#root'));\n"],"sourceRoot":""}